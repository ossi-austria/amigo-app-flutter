// Mocks generated by Mockito 5.1.0 from annotations
// in amigoapp/test/provider/call_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:amigoapp/src/dto/call_token_dto.dart' as _i11;
import 'package:amigoapp/src/dto/group_dto.dart' as _i3;
import 'package:amigoapp/src/dto/person_dto.dart' as _i5;
import 'package:amigoapp/src/provider/group_provider.dart' as _i7;
import 'package:amigoapp/src/provider/profile_provider.dart' as _i12;
import 'package:amigoapp/src/service/api/call_api_service.dart' as _i10;
import 'package:amigoapp/src/service/navigation_service.dart' as _i13;
import 'package:amigoapp/src/service/tracking.dart' as _i14;
import 'package:chopper/chopper.dart' as _i4;
import 'package:flutter/material.dart' as _i6;
import 'package:logger/src/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLogger_0 extends _i1.Fake implements _i2.Logger {}

class _FakeGroupDto_1 extends _i1.Fake implements _i3.GroupDto {}

class _FakeChopperClient_2 extends _i1.Fake implements _i4.ChopperClient {}

class _FakeType_3 extends _i1.Fake implements Type {}

class _FakeResponse_4<BodyType> extends _i1.Fake
    implements _i4.Response<BodyType> {}

class _FakePersonDto_5 extends _i1.Fake implements _i5.PersonDto {}

class _FakeGlobalKey_6<T extends _i6.State<_i6.StatefulWidget>> extends _i1.Fake
    implements _i6.GlobalKey<T> {}

/// A class which mocks [GroupProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupProvider extends _i1.Mock implements _i7.GroupProvider {
  MockGroupProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger_0())
          as _i2.Logger);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void refreshSelectedGroup() =>
      super.noSuchMethod(Invocation.method(#refreshSelectedGroup, []),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i3.GroupDto> getSelectedGroup() =>
      (super.noSuchMethod(Invocation.method(#getSelectedGroup, []),
              returnValue: Future<_i3.GroupDto>.value(_FakeGroupDto_1()))
          as _i8.Future<_i3.GroupDto>);
  @override
  _i8.Future<_i5.PersonDto?> getAnalogue() =>
      (super.noSuchMethod(Invocation.method(#getAnalogue, []),
              returnValue: Future<_i5.PersonDto?>.value())
          as _i8.Future<_i5.PersonDto?>);
  @override
  void selectGroupMember(_i5.PersonDto? personDto) =>
      super.noSuchMethod(Invocation.method(#selectGroupMember, [personDto]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [CallApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallApiService extends _i1.Mock implements _i10.CallApiService {
  MockCallApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ChopperClient get client =>
      (super.noSuchMethod(Invocation.getter(#client),
          returnValue: _FakeChopperClient_2()) as _i4.ChopperClient);
  @override
  set client(_i4.ChopperClient? _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  Type get definitionType =>
      (super.noSuchMethod(Invocation.getter(#definitionType),
          returnValue: _FakeType_3()) as Type);
  @override
  _i8.Future<_i4.Response<_i11.CallTokenDto>> createCall(
          String? receiverId, String? callType, {String? personId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createCall, [receiverId, callType], {#personId: personId}),
              returnValue: Future<_i4.Response<_i11.CallTokenDto>>.value(
                  _FakeResponse_4<_i11.CallTokenDto>()))
          as _i8.Future<_i4.Response<_i11.CallTokenDto>>);
  @override
  _i8.Future<_i4.Response<_i11.CallTokenDto>> getCall(String? id) =>
      (super.noSuchMethod(Invocation.method(#getCall, [id]),
              returnValue: Future<_i4.Response<_i11.CallTokenDto>>.value(
                  _FakeResponse_4<_i11.CallTokenDto>()))
          as _i8.Future<_i4.Response<_i11.CallTokenDto>>);
  @override
  _i8.Future<_i4.Response<List<_i11.CallTokenDto>>> getSentCalls() =>
      (super.noSuchMethod(Invocation.method(#getSentCalls, []),
              returnValue: Future<_i4.Response<List<_i11.CallTokenDto>>>.value(
                  _FakeResponse_4<List<_i11.CallTokenDto>>()))
          as _i8.Future<_i4.Response<List<_i11.CallTokenDto>>>);
  @override
  _i8.Future<_i4.Response<List<_i11.CallTokenDto>>> getReceivedCalls() =>
      (super.noSuchMethod(Invocation.method(#getReceivedCalls, []),
              returnValue: Future<_i4.Response<List<_i11.CallTokenDto>>>.value(
                  _FakeResponse_4<List<_i11.CallTokenDto>>()))
          as _i8.Future<_i4.Response<List<_i11.CallTokenDto>>>);
  @override
  _i8.Future<_i4.Response<_i11.CallTokenDto>> acceptCall(String? id) =>
      (super.noSuchMethod(Invocation.method(#acceptCall, [id]),
              returnValue: Future<_i4.Response<_i11.CallTokenDto>>.value(
                  _FakeResponse_4<_i11.CallTokenDto>()))
          as _i8.Future<_i4.Response<_i11.CallTokenDto>>);
  @override
  _i8.Future<_i4.Response<_i11.CallTokenDto>> cancelCall(String? id) =>
      (super.noSuchMethod(Invocation.method(#cancelCall, [id]),
              returnValue: Future<_i4.Response<_i11.CallTokenDto>>.value(
                  _FakeResponse_4<_i11.CallTokenDto>()))
          as _i8.Future<_i4.Response<_i11.CallTokenDto>>);
  @override
  _i8.Future<_i4.Response<_i11.CallTokenDto>> denyCall(String? id) =>
      (super.noSuchMethod(Invocation.method(#denyCall, [id]),
              returnValue: Future<_i4.Response<_i11.CallTokenDto>>.value(
                  _FakeResponse_4<_i11.CallTokenDto>()))
          as _i8.Future<_i4.Response<_i11.CallTokenDto>>);
  @override
  _i8.Future<_i4.Response<_i11.CallTokenDto>> finishCall(String? id) =>
      (super.noSuchMethod(Invocation.method(#finishCall, [id]),
              returnValue: Future<_i4.Response<_i11.CallTokenDto>>.value(
                  _FakeResponse_4<_i11.CallTokenDto>()))
          as _i8.Future<_i4.Response<_i11.CallTokenDto>>);
}

/// A class which mocks [ProfileProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileProvider extends _i1.Mock implements _i12.ProfileProvider {
  MockProfileProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<_i5.PersonDto> getOwnProfile() =>
      (super.noSuchMethod(Invocation.method(#getOwnProfile, []),
              returnValue: Future<_i5.PersonDto>.value(_FakePersonDto_5()))
          as _i8.Future<_i5.PersonDto>);
  @override
  _i8.Future<_i5.PersonDto> fetchOwnProfile() =>
      (super.noSuchMethod(Invocation.method(#fetchOwnProfile, []),
              returnValue: Future<_i5.PersonDto>.value(_FakePersonDto_5()))
          as _i8.Future<_i5.PersonDto>);
  @override
  void addListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i13.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GlobalKey<_i6.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(Invocation.getter(#navigatorKey),
              returnValue: _FakeGlobalKey_6<_i6.NavigatorState>())
          as _i6.GlobalKey<_i6.NavigatorState>);
  @override
  _i8.Future<dynamic> navigateTo(String? routeName,
          {bool? removeAllRoutes = false, Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#navigateTo, [routeName],
              {#removeAllRoutes: removeAllRoutes, #arguments: arguments}),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  void navigateBack() =>
      super.noSuchMethod(Invocation.method(#navigateBack, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Tracking].
///
/// See the documentation for Mockito's code generation for more information.
class MockTracking extends _i1.Mock implements _i14.Tracking {
  MockTracking() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void logEvent(String? name) =>
      super.noSuchMethod(Invocation.method(#logEvent, [name]),
          returnValueForMissingStub: null);
  @override
  void logEventVariant(String? name, String? variant) =>
      super.noSuchMethod(Invocation.method(#logEventVariant, [name, variant]),
          returnValueForMissingStub: null);
  @override
  void setCurrentScreen(String? screenName) =>
      super.noSuchMethod(Invocation.method(#setCurrentScreen, [screenName]),
          returnValueForMissingStub: null);
  @override
  void logError(dynamic exception, String? reason, StackTrace? stackTrace) =>
      super.noSuchMethod(
          Invocation.method(#logError, [exception, reason, stackTrace]),
          returnValueForMissingStub: null);
}
